package se.bth.swatkats.letstalk.gui;

import java.awt.Toolkit;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import se.bth.swatkats.letstalk.connection.GuiHandler;
import se.bth.swatkats.letstalk.connection.packet.message.FileMessage;
import se.bth.swatkats.letstalk.connection.packet.message.TextMessage;
import se.bth.swatkats.letstalk.user.User;

/**
 * This class provides the window which has a resgistry of calls.
 * 
 * @author Sokratis Papadopoulos and David Alarcon Prada.
 */
public class CallRecords extends javax.swing.JFrame {
    private static int convID;
    private static String user_one;
    private static String user_two;

    /**
     * Creates new form CallRecords
     */
    public CallRecords(int convID, String user_one, String user_two) {
        this.convID = convID;
        this.user_one = user_one;
        this.user_two = user_two;
        initComponents();
        myInitComponents();
        this.setVisible(true);
    }
    
    private int getUserID(String username){
        ArrayList<User> globalUsers = GuiHandler.getInstance().searchGlobalUsers("", GuiHandler.getInstance().getUser().getId());
        globalUsers.add(GuiHandler.getInstance().getUser());
        
        for(User u : globalUsers){
            if(u.getUsername().equals(username)){
                return u.getId();
            }
        }
        return 0;
    }

    /**
     * Provides modifications written by us.
     */
    private void myInitComponents(){
        //set the favicon --> logo of app at top-left of window
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("img/iconHead.png")));
        if(!user_two.equals("(Group Chat)"))    //group conversation
            setTitle("Conversation of " + user_one + " with " + user_two);
        else  //one to one conversation
            setTitle("Group conversation " + user_one);
        loadConversationHistory(GuiHandler.getInstance().fetchTextConversationHistory(convID, getUserID(user_one)),GuiHandler.getInstance().fetchFileConversationHistory(convID, getUserID(user_one) ));

    }
    
    /**
     * This method loads the messages & files history.
     * 
     * @param textMessages - All the messages which belong to the conversation.
     * @param fileMessages - All the files which belong to the conversation.
     */
    private void loadConversationHistory(ArrayList<TextMessage> textMessages, ArrayList<FileMessage> fileMessages){
        messageHistoryTextArea.setText("");
        
        Timestamp previous = new Timestamp(24,5,20,11,5,20,1000);
        String prev = new java.text.SimpleDateFormat("dd").format(previous);
        
        for(TextMessage m : textMessages){
            Timestamp current = ((TextMessage) m).getTimestamp();
            String cur = new java.text.SimpleDateFormat("dd").format(current);
            if(!prev.equals(cur)){
                String date = new java.text.SimpleDateFormat("EEE, MMM d, ''yy").format(current);
                messageHistoryTextArea.append("~~~~~~~~~~~~~~~~~~~~~~   " + date + "   ~~~~~~~~~~~~~~~~~~~~~~" + System.getProperty("line.separator"));
            }
            prev = cur;
            String date = new java.text.SimpleDateFormat("h:mm a").format(current);
            messageHistoryTextArea.append("Sender IP:" + ((TextMessage) m).getSenderip() + " @ " +date + " - " + ((TextMessage) m).getUsername() + ": " + ((TextMessage) m).getText() + System.getProperty("line.separator") );
        }
        
        filesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = putFiles(fileMessages);
            @Override
            public int getSize() { return strings.length; }
            @Override
            public Object getElementAt(int i) { return strings[i]; }
        });
    }
    
     /**
     * This method returns a list with files' names.
     * 
     * @param files - List of files.
     * @return temp - String[] which contains the files' names.
     */
    public String[] putFiles(ArrayList<FileMessage> files){
//        System.out.println("=== insert files ==== ");
        String[] temp = new String[files.size()];
        int pos=0;
        for(FileMessage m: files){
            temp[pos++] = m.getFileid() + "| " + m.getFilename() + " (" + m.getSenderip() + ")" ;
        }
        return temp;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wholePanel = new javax.swing.JPanel();
        convHistoryLabel = new javax.swing.JLabel();
        convPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        messageHistoryTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList();
        mesHisImg2 = new javax.swing.JLabel();
        mesHisImg = new javax.swing.JLabel();

        setResizable(false);

        wholePanel.setBackground(new java.awt.Color(245, 245, 245));

        convHistoryLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        convHistoryLabel.setText("Conversation History");

        convPanel.setBackground(new java.awt.Color(237, 237, 255));
        convPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Messages & Files", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        messageHistoryTextArea.setEditable(false);
        messageHistoryTextArea.setColumns(20);
        messageHistoryTextArea.setRows(5);
        jScrollPane4.setViewportView(messageHistoryTextArea);

        filesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filesListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(filesList);

        javax.swing.GroupLayout convPanelLayout = new javax.swing.GroupLayout(convPanel);
        convPanel.setLayout(convPanelLayout);
        convPanelLayout.setHorizontalGroup(
            convPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(convPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        convPanelLayout.setVerticalGroup(
            convPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(convPanelLayout.createSequentialGroup()
                .addGroup(convPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
                .addContainerGap())
        );

        mesHisImg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/bth/swatkats/letstalk/gui/img/mesHis.png"))); // NOI18N

        mesHisImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/bth/swatkats/letstalk/gui/img/mesHis.png"))); // NOI18N

        javax.swing.GroupLayout wholePanelLayout = new javax.swing.GroupLayout(wholePanel);
        wholePanel.setLayout(wholePanelLayout);
        wholePanelLayout.setHorizontalGroup(
            wholePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wholePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(convPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(wholePanelLayout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(mesHisImg)
                .addGap(104, 104, 104)
                .addComponent(convHistoryLabel)
                .addGap(110, 110, 110)
                .addComponent(mesHisImg2)
                .addContainerGap(211, Short.MAX_VALUE))
        );
        wholePanelLayout.setVerticalGroup(
            wholePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wholePanelLayout.createSequentialGroup()
                .addGroup(wholePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wholePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(wholePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mesHisImg)
                            .addComponent(mesHisImg2))
                        .addGap(18, 18, 18))
                    .addGroup(wholePanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(convHistoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(convPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wholePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wholePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filesListValueChanged
        if(!filesList.getValueIsAdjusting()){
            //            System.out.println("Files list value changed.");
            int fileID = getSelectedFileID();
            String filename = getSelectedFileName();

            //choose where to store
            String path;
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Downloading file directory");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                path = chooser.getSelectedFile().getAbsolutePath();
                path += "\\";
            } else {
                System.out.println("No Selection ");
                path = null;
            }

            GuiHandler.getInstance().startFileDownload(path, filename, fileID, false);
        }
    }//GEN-LAST:event_filesListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CallRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CallRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CallRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CallRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CallRecords(convID, user_one,user_two).setVisible(true);
            }
        });
    }
            
    /**
     * This method returns the ID of the file selected.
     * 
     * @return convID if it is founded, -100 if there is not file selected.
     */
    private int getSelectedFileID(){
        int convID =-100;
        String selectedValue = null;
        try{
            selectedValue = getClearFileId(filesList.getSelectedValue().toString());
        }catch(java.lang.NullPointerException ex){
            System.out.println("EXCEPTION: no file is selected on filesList.");
            return -100;
        }
        convID = Integer.parseInt(selectedValue);
        return convID;
    }
    
    /**
     * This method returns the file's name of the selected file.
     * 
     * @return selectedValue - name of the selected file. 
     */
    private String getSelectedFileName(){
        String selectedValue = getClearFileName(filesList.getSelectedValue().toString());
        return selectedValue;
    }
    
    /**
     * This method take some part of the conversation's name.
     * 
     * @param convName - All the conversation name.
     * @return clear - Part of the conversation name.
     */
    public String getClearSelectedValue(String convName){
        String[] parts = convName.split("\\(");
        String clear = parts[0];
        clear = clear.substring(0,clear.length()-1);
        return clear;
    }
    
    /**
     * This method takes some parts of the file ID.
     * 
     * @param dirty - All the file ID.
     * @return clear - Part of the file ID.
     */
    private String getClearFileId(String dirty){
        String[] parts = dirty.split("|");
        String clear = parts[0];
        return clear;
    }
    
    /**
     * This method takes some parts of the file name.
     * 
     * @param dirty - All the file name.
     * @return clear - Part of the file name without blanks.
     */
    private String getClearFileName(String dirty){
//        System.out.println("dirty: " + dirty);
        String[] parts = dirty.split("|");
        String clear= "";
        for(int i=2; i<parts.length; i++)
            clear += parts[i];
        
//        System.out.println("clear: " + clear);
        return clear.trim();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel convHistoryLabel;
    private javax.swing.JPanel convPanel;
    private javax.swing.JList filesList;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel mesHisImg;
    private javax.swing.JLabel mesHisImg2;
    private javax.swing.JTextArea messageHistoryTextArea;
    private javax.swing.JPanel wholePanel;
    // End of variables declaration//GEN-END:variables
}
