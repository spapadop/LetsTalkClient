package se.bth.swatkats.letstalk.media;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import se.bth.swatkats.letstalk.connection.GuiHandler;

/**
 * Captures a picture from webcam of the computer and uploads it to a
 * conversation.
 *
 * @author Chatzakis Nikolaos, Nikolaos Kondylidis, Sokratis Papadopoulos
 */
public class WebcamCapture extends javax.swing.JFrame {

    private final Dimension cs = WebcamResolution.VGA.getSize();
    private final Dimension ds = new Dimension(450, 360);
    private final Webcam webcam = Webcam.getDefault();
    private final WebcamPanel webcamPanel = new WebcamPanel(webcam, ds, false);
    private final Thread webcamThread;
    private String fileName;

    /**
     * Creates new form WebcamCapture
     */
    public WebcamCapture() {
        initComponents();
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../gui/img/iconHead.png")));

        webcam.setViewSize(cs);
        webcamPanel.setFillArea(true);
        webcamPanelGui.setLayout(new FlowLayout());
        webcamPanelGui.add(webcamPanel);
        // Start Webcamera
        webcamThread = new Thread() {
            @Override
            public void run() {
                webcamPanel.start();
            }
        };

        webcamThread.setDaemon(true);
        webcamThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        camPic = new javax.swing.JDialog();
        picLabel = new javax.swing.JLabel();
        sendButt = new javax.swing.JButton();
        cancelButt = new javax.swing.JButton();
        webcamPanelGui = new javax.swing.JPanel();
        captureBT = new javax.swing.JButton();

        camPic.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        camPic.setResizable(false);

        sendButt.setText("Send");
        sendButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtActionPerformed(evt);
            }
        });

        cancelButt.setText("Cancel");
        cancelButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout camPicLayout = new javax.swing.GroupLayout(camPic.getContentPane());
        camPic.getContentPane().setLayout(camPicLayout);
        camPicLayout.setHorizontalGroup(
            camPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(camPicLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(camPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(camPicLayout.createSequentialGroup()
                        .addComponent(sendButt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButt))
                    .addComponent(picLabel))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        camPicLayout.setVerticalGroup(
            camPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(camPicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                .addGroup(camPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButt)
                    .addComponent(cancelButt))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        webcamPanelGui.setBackground(new java.awt.Color(0, 0, 0));
        webcamPanelGui.setPreferredSize(new java.awt.Dimension(450, 360));

        javax.swing.GroupLayout webcamPanelGuiLayout = new javax.swing.GroupLayout(webcamPanelGui);
        webcamPanelGui.setLayout(webcamPanelGuiLayout);
        webcamPanelGuiLayout.setHorizontalGroup(
            webcamPanelGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        webcamPanelGuiLayout.setVerticalGroup(
            webcamPanelGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        captureBT.setText("Capture");
        captureBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(webcamPanelGui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(captureBT)
                .addGap(196, 196, 196))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(webcamPanelGui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(captureBT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Performed when "Capture" button is pressed. It takes a picture and gives
     * a preview of it with the options to either send it to the conversation or
     * cancel the process deleting the file.
     *
     * @param evt
     */
    private void captureBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureBTActionPerformed

        // Capture snapshot
        try {

            //Creates the picture name
            Date now = new Date();
            SimpleDateFormat df = new SimpleDateFormat("ddMyyhhmmss");
            fileName = "Picture_" + GuiHandler.getInstance().getUser().getUsername() + "_" + df.format(now) + ".jpg";
            File pic = new File(fileName);
            BufferedImage img = webcam.getImage();
            ImageIO.write(img, "JPG", pic); //saves the picture to the local folder

            // Resize and show at JLabel
            ImageIcon icon = new ImageIcon(img);

            //set the label - assign the picture to it
            picLabel.setSize(img.getWidth(), img.getHeight());
            picLabel.setIcon(icon);

            //setting the dialog credentials
            //camPic.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../gui/img/iconHead.png")));
            camPic.setSize(img.getWidth() + 25, img.getHeight() + 100);
            camPic.setLocationRelativeTo(null);
            camPic.setVisible(true);

        } catch (IOException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, "Webcamera is not responding!", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex.getMessage());
        }

        this.setVisible(false);
        // terminates the web camera
        webcamPanel.stop();
    }//GEN-LAST:event_captureBTActionPerformed

    /**
     * Triggered when send picture button is pressed. It uploads the picture and
     * sends it to the conversation. Then, it disposes the window.
     *
     * @param evt
     */
    private void sendButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtActionPerformed
        GuiHandler.getInstance().getGui().uploadFile(fileName);
        camPic.setVisible(false);
        camPic.dispose();

    }//GEN-LAST:event_sendButtActionPerformed

    /**
     * Cancels the process deleting the created picture. Then it disposes the
     * window.
     *
     * @param evt
     */
    private void cancelButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtActionPerformed
        File f = new File(fileName);
        f.delete();
        camPic.setVisible(false);
        camPic.dispose();
    }//GEN-LAST:event_cancelButtActionPerformed

    /**
     * Stops the thread - closes the camera.
     *
     * @param evt
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        webcamPanel.stop();
    }//GEN-LAST:event_formWindowClosed

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WebcamCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WebcamCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WebcamCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebcamCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WebcamCapture().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog camPic;
    private javax.swing.JButton cancelButt;
    private javax.swing.JButton captureBT;
    private javax.swing.JLabel picLabel;
    private javax.swing.JButton sendButt;
    private javax.swing.JPanel webcamPanelGui;
    // End of variables declaration//GEN-END:variables
}
